/*
 * generated by Xtext 2.9.2
 */
package de.luh.se.mbse.statemachine.textualeditor.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.luh.se.mbse.statemachine.textualeditor.ide.contentassist.antlr.internal.InternalAMFParser;
import de.luh.se.mbse.statemachine.textualeditor.services.AMFGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class AMFParser extends AbstractContentAssistParser {

	@Inject
	private AMFGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAMFParser createParser() {
		InternalAMFParser result = new InternalAMFParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTypeOfChannelAccess().getAlternatives(), "rule__TypeOfChannel__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getNetworkAccess().getGroup(), "rule__Network__Group__0");
					put(grammarAccess.getNetworkAccess().getGroup_3(), "rule__Network__Group_3__0");
					put(grammarAccess.getNetworkAccess().getGroup_4(), "rule__Network__Group_4__0");
					put(grammarAccess.getStatemachineAccess().getGroup(), "rule__Statemachine__Group__0");
					put(grammarAccess.getStatemachineAccess().getGroup_6(), "rule__Statemachine__Group_6__0");
					put(grammarAccess.getStatemachineAccess().getGroup_7(), "rule__Statemachine__Group_7__0");
					put(grammarAccess.getChannelAccess().getGroup(), "rule__Channel__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getNetworkAccess().getNameAssignment_1(), "rule__Network__NameAssignment_1");
					put(grammarAccess.getNetworkAccess().getChannelAssignment_3_0(), "rule__Network__ChannelAssignment_3_0");
					put(grammarAccess.getNetworkAccess().getChannelAssignment_3_1(), "rule__Network__ChannelAssignment_3_1");
					put(grammarAccess.getNetworkAccess().getStatemachineAssignment_4_0(), "rule__Network__StatemachineAssignment_4_0");
					put(grammarAccess.getNetworkAccess().getStatemachineAssignment_4_1(), "rule__Network__StatemachineAssignment_4_1");
					put(grammarAccess.getStatemachineAccess().getNameAssignment_2(), "rule__Statemachine__NameAssignment_2");
					put(grammarAccess.getStatemachineAccess().getInitialstateAssignment_5(), "rule__Statemachine__InitialstateAssignment_5");
					put(grammarAccess.getStatemachineAccess().getStateAssignment_6_0(), "rule__Statemachine__StateAssignment_6_0");
					put(grammarAccess.getStatemachineAccess().getStateAssignment_6_1(), "rule__Statemachine__StateAssignment_6_1");
					put(grammarAccess.getStatemachineAccess().getTransitionAssignment_7_0(), "rule__Statemachine__TransitionAssignment_7_0");
					put(grammarAccess.getStatemachineAccess().getTransitionAssignment_7_1(), "rule__Statemachine__TransitionAssignment_7_1");
					put(grammarAccess.getChannelAccess().getTypeAssignment_1(), "rule__Channel__TypeAssignment_1");
					put(grammarAccess.getChannelAccess().getNameAssignment_3(), "rule__Channel__NameAssignment_3");
					put(grammarAccess.getTransitionAccess().getEventAssignment_3_1(), "rule__Transition__EventAssignment_3_1");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_5(), "rule__Transition__SourceAssignment_5");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_7(), "rule__Transition__TargetAssignment_7");
					put(grammarAccess.getTransitionAccess().getChannelAssignment_9(), "rule__Transition__ChannelAssignment_9");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAMFParser typedParser = (InternalAMFParser) parser;
			typedParser.entryRuleNetwork();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AMFGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AMFGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
