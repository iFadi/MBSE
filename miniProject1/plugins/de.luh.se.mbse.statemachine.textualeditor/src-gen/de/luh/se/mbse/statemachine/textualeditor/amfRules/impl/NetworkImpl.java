/**
 * generated by Xtext 2.9.2
 */
package de.luh.se.mbse.statemachine.textualeditor.amfRules.impl;

import de.luh.se.mbse.statemachine.textualeditor.amfRules.AmfRulesPackage;
import de.luh.se.mbse.statemachine.textualeditor.amfRules.Channel;
import de.luh.se.mbse.statemachine.textualeditor.amfRules.Network;
import de.luh.se.mbse.statemachine.textualeditor.amfRules.Statemachine;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Network</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.luh.se.mbse.statemachine.textualeditor.amfRules.impl.NetworkImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.luh.se.mbse.statemachine.textualeditor.amfRules.impl.NetworkImpl#getChannel <em>Channel</em>}</li>
 *   <li>{@link de.luh.se.mbse.statemachine.textualeditor.amfRules.impl.NetworkImpl#getStatemachine <em>Statemachine</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NetworkImpl extends MinimalEObjectImpl.Container implements Network
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getChannel() <em>Channel</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannel()
   * @generated
   * @ordered
   */
  protected EList<Channel> channel;

  /**
   * The cached value of the '{@link #getStatemachine() <em>Statemachine</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatemachine()
   * @generated
   * @ordered
   */
  protected EList<Statemachine> statemachine;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NetworkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AmfRulesPackage.Literals.NETWORK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AmfRulesPackage.NETWORK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Channel> getChannel()
  {
    if (channel == null)
    {
      channel = new EObjectContainmentEList<Channel>(Channel.class, this, AmfRulesPackage.NETWORK__CHANNEL);
    }
    return channel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statemachine> getStatemachine()
  {
    if (statemachine == null)
    {
      statemachine = new EObjectContainmentEList<Statemachine>(Statemachine.class, this, AmfRulesPackage.NETWORK__STATEMACHINE);
    }
    return statemachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AmfRulesPackage.NETWORK__CHANNEL:
        return ((InternalEList<?>)getChannel()).basicRemove(otherEnd, msgs);
      case AmfRulesPackage.NETWORK__STATEMACHINE:
        return ((InternalEList<?>)getStatemachine()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AmfRulesPackage.NETWORK__NAME:
        return getName();
      case AmfRulesPackage.NETWORK__CHANNEL:
        return getChannel();
      case AmfRulesPackage.NETWORK__STATEMACHINE:
        return getStatemachine();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AmfRulesPackage.NETWORK__NAME:
        setName((String)newValue);
        return;
      case AmfRulesPackage.NETWORK__CHANNEL:
        getChannel().clear();
        getChannel().addAll((Collection<? extends Channel>)newValue);
        return;
      case AmfRulesPackage.NETWORK__STATEMACHINE:
        getStatemachine().clear();
        getStatemachine().addAll((Collection<? extends Statemachine>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AmfRulesPackage.NETWORK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AmfRulesPackage.NETWORK__CHANNEL:
        getChannel().clear();
        return;
      case AmfRulesPackage.NETWORK__STATEMACHINE:
        getStatemachine().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AmfRulesPackage.NETWORK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AmfRulesPackage.NETWORK__CHANNEL:
        return channel != null && !channel.isEmpty();
      case AmfRulesPackage.NETWORK__STATEMACHINE:
        return statemachine != null && !statemachine.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //NetworkImpl
