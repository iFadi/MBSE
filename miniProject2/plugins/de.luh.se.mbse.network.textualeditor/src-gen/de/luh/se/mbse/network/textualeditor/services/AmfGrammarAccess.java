/*
 * generated by Xtext 2.9.1
 */
package de.luh.se.mbse.network.textualeditor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AmfGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.Network");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNetworkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cChannelAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cChannelChannelParserRuleCall_3_0_0 = (RuleCall)cChannelAssignment_3_0.eContents().get(0);
		private final Assignment cChannelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChannelChannelParserRuleCall_3_1_0 = (RuleCall)cChannelAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cStatemachineAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cStatemachineStatemachineParserRuleCall_4_0_0 = (RuleCall)cStatemachineAssignment_4_0.eContents().get(0);
		private final Assignment cStatemachineAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatemachineStatemachineParserRuleCall_4_1_0 = (RuleCall)cStatemachineAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Network:
		//	'Network'
		//	name=EString
		//	'{' (channel+=Channel channel+=Channel*) (statemachine+=Statemachine statemachine+=Statemachine*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Network' name=EString '{' (channel+=Channel channel+=Channel*) (statemachine+=Statemachine statemachine+=Statemachine*)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Network'
		public Keyword getNetworkKeyword_0() { return cNetworkKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(channel+=Channel channel+=Channel*)
		public Group getGroup_3() { return cGroup_3; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_3_0() { return cChannelAssignment_3_0; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_3_0_0() { return cChannelChannelParserRuleCall_3_0_0; }
		
		//channel+=Channel*
		public Assignment getChannelAssignment_3_1() { return cChannelAssignment_3_1; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_3_1_0() { return cChannelChannelParserRuleCall_3_1_0; }
		
		//(statemachine+=Statemachine statemachine+=Statemachine*)
		public Group getGroup_4() { return cGroup_4; }
		
		//statemachine+=Statemachine
		public Assignment getStatemachineAssignment_4_0() { return cStatemachineAssignment_4_0; }
		
		//Statemachine
		public RuleCall getStatemachineStatemachineParserRuleCall_4_0_0() { return cStatemachineStatemachineParserRuleCall_4_0_0; }
		
		//statemachine+=Statemachine*
		public Assignment getStatemachineAssignment_4_1() { return cStatemachineAssignment_4_1; }
		
		//Statemachine
		public RuleCall getStatemachineStatemachineParserRuleCall_4_1_0() { return cStatemachineStatemachineParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatemachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStatemachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInitKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialstateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInitialstateStateCrossReference_5_0 = (CrossReference)cInitialstateAssignment_5.eContents().get(0);
		private final RuleCall cInitialstateStateEStringParserRuleCall_5_0_1 = (RuleCall)cInitialstateStateCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStateAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_6_0_0 = (RuleCall)cStateAssignment_6_0.eContents().get(0);
		private final Assignment cStateAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_6_1_0 = (RuleCall)cStateAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTransitionAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTransitionTransitionParserRuleCall_7_0_0 = (RuleCall)cTransitionAssignment_7_0.eContents().get(0);
		private final Assignment cTransitionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_7_1_0 = (RuleCall)cTransitionAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Statemachine:
		//	{Statemachine}
		//	'Statemachine'
		//	name=EString
		//	'{'
		//	'init' initialstate=[State|EString] (state+=State state+=State*)? (transition+=Transition transition+=Transition*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Statemachine} 'Statemachine' name=EString '{' 'init' initialstate=[State|EString] (state+=State state+=State*)?
		//(transition+=Transition transition+=Transition*) '}'
		public Group getGroup() { return cGroup; }
		
		//{Statemachine}
		public Action getStatemachineAction_0() { return cStatemachineAction_0; }
		
		//'Statemachine'
		public Keyword getStatemachineKeyword_1() { return cStatemachineKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'init'
		public Keyword getInitKeyword_4() { return cInitKeyword_4; }
		
		//initialstate=[State|EString]
		public Assignment getInitialstateAssignment_5() { return cInitialstateAssignment_5; }
		
		//[State|EString]
		public CrossReference getInitialstateStateCrossReference_5_0() { return cInitialstateStateCrossReference_5_0; }
		
		//EString
		public RuleCall getInitialstateStateEStringParserRuleCall_5_0_1() { return cInitialstateStateEStringParserRuleCall_5_0_1; }
		
		//(state+=State state+=State*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//state+=State
		public Assignment getStateAssignment_6_0() { return cStateAssignment_6_0; }
		
		//State
		public RuleCall getStateStateParserRuleCall_6_0_0() { return cStateStateParserRuleCall_6_0_0; }
		
		//state+=State*
		public Assignment getStateAssignment_6_1() { return cStateAssignment_6_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_6_1_0() { return cStateStateParserRuleCall_6_1_0; }
		
		//(transition+=Transition transition+=Transition*)
		public Group getGroup_7() { return cGroup_7; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_7_0() { return cTransitionAssignment_7_0; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_7_0_0() { return cTransitionTransitionParserRuleCall_7_0_0; }
		
		//transition+=Transition*
		public Assignment getTransitionAssignment_7_1() { return cTransitionAssignment_7_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_7_1_0() { return cTransitionTransitionParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChannelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeOfChannelEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cChannelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Channel:
		//	{Channel} Type+=TypeOfChannel 'Channel' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Channel} Type+=TypeOfChannel 'Channel' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Channel}
		public Action getChannelAction_0() { return cChannelAction_0; }
		
		//Type+=TypeOfChannel
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeOfChannel
		public RuleCall getTypeTypeOfChannelEnumRuleCall_1_0() { return cTypeTypeOfChannelEnumRuleCall_1_0; }
		
		//'Channel'
		public Keyword getChannelKeyword_2() { return cChannelKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChannelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cChannelChannelCrossReference_5_0 = (CrossReference)cChannelAssignment_5.eContents().get(0);
		private final RuleCall cChannelChannelEStringParserRuleCall_5_0_1 = (RuleCall)cChannelChannelCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetStateCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_7_0_1 = (RuleCall)cTargetStateCrossReference_7_0.eContents().get(1);
		private final Assignment cEventAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEventEventEnumRuleCall_8_0 = (RuleCall)cEventAssignment_8.eContents().get(0);
		
		//Transition:
		//	{Transition}
		//	'Transition' source=[State|EString] '->' '(' channel=[Channel|EString] ')' target=[State|EString] event=Event;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition} 'Transition' source=[State|EString] '->' '(' channel=[Channel|EString] ')' target=[State|EString]
		//event=Event
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//'Transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//source=[State|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[State|EString]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }
		
		//EString
		public RuleCall getSourceStateEStringParserRuleCall_2_0_1() { return cSourceStateEStringParserRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//channel=[Channel|EString]
		public Assignment getChannelAssignment_5() { return cChannelAssignment_5; }
		
		//[Channel|EString]
		public CrossReference getChannelChannelCrossReference_5_0() { return cChannelChannelCrossReference_5_0; }
		
		//EString
		public RuleCall getChannelChannelEStringParserRuleCall_5_0_1() { return cChannelChannelEStringParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//target=[State|EString]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[State|EString]
		public CrossReference getTargetStateCrossReference_7_0() { return cTargetStateCrossReference_7_0; }
		
		//EString
		public RuleCall getTargetStateEStringParserRuleCall_7_0_1() { return cTargetStateEStringParserRuleCall_7_0_1; }
		
		//event=Event
		public Assignment getEventAssignment_8() { return cEventAssignment_8; }
		
		//Event
		public RuleCall getEventEventEnumRuleCall_8_0() { return cEventEventEnumRuleCall_8_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//State:
		//	{State}
		//	'State'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'State' name=EString
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'State'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	public class TypeOfChannelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.TypeOfChannel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSynchronousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSynchronousSynchronousKeyword_0_0 = (Keyword)cSynchronousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAsynchronousEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAsynchronousAsynchronousKeyword_1_0 = (Keyword)cAsynchronousEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeOfChannel:
		//	Synchronous | Asynchronous;
		public EnumRule getRule() { return rule; }
		
		//Synchronous | Asynchronous
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Synchronous
		public EnumLiteralDeclaration getSynchronousEnumLiteralDeclaration_0() { return cSynchronousEnumLiteralDeclaration_0; }
		
		//'Synchronous'
		public Keyword getSynchronousSynchronousKeyword_0_0() { return cSynchronousSynchronousKeyword_0_0; }
		
		//Asynchronous
		public EnumLiteralDeclaration getAsynchronousEnumLiteralDeclaration_1() { return cAsynchronousEnumLiteralDeclaration_1; }
		
		//'Asynchronous'
		public Keyword getAsynchronousAsynchronousKeyword_1_0() { return cAsynchronousAsynchronousKeyword_1_0; }
	}
	public class EventElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.luh.se.mbse.network.textualeditor.Amf.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSENDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSENDSENDKeyword_0_0 = (Keyword)cSENDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRECEIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRECEIVERECEIVEKeyword_1_0 = (Keyword)cRECEIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Event:
		//	SEND | RECEIVE;
		public EnumRule getRule() { return rule; }
		
		//SEND | RECEIVE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SEND
		public EnumLiteralDeclaration getSENDEnumLiteralDeclaration_0() { return cSENDEnumLiteralDeclaration_0; }
		
		//'SEND'
		public Keyword getSENDSENDKeyword_0_0() { return cSENDSENDKeyword_0_0; }
		
		//RECEIVE
		public EnumLiteralDeclaration getRECEIVEEnumLiteralDeclaration_1() { return cRECEIVEEnumLiteralDeclaration_1; }
		
		//'RECEIVE'
		public Keyword getRECEIVERECEIVEKeyword_1_0() { return cRECEIVERECEIVEKeyword_1_0; }
	}
	
	private final NetworkElements pNetwork;
	private final StatemachineElements pStatemachine;
	private final EStringElements pEString;
	private final TypeOfChannelElements eTypeOfChannel;
	private final ChannelElements pChannel;
	private final TransitionElements pTransition;
	private final EventElements eEvent;
	private final StateElements pState;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AmfGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNetwork = new NetworkElements();
		this.pStatemachine = new StatemachineElements();
		this.pEString = new EStringElements();
		this.eTypeOfChannel = new TypeOfChannelElements();
		this.pChannel = new ChannelElements();
		this.pTransition = new TransitionElements();
		this.eEvent = new EventElements();
		this.pState = new StateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.luh.se.mbse.network.textualeditor.Amf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Network:
	//	'Network'
	//	name=EString
	//	'{' (channel+=Channel channel+=Channel*) (statemachine+=Statemachine statemachine+=Statemachine*)
	//	'}';
	public NetworkElements getNetworkAccess() {
		return pNetwork;
	}
	
	public ParserRule getNetworkRule() {
		return getNetworkAccess().getRule();
	}
	
	//Statemachine:
	//	{Statemachine}
	//	'Statemachine'
	//	name=EString
	//	'{'
	//	'init' initialstate=[State|EString] (state+=State state+=State*)? (transition+=Transition transition+=Transition*)
	//	'}';
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum TypeOfChannel:
	//	Synchronous | Asynchronous;
	public TypeOfChannelElements getTypeOfChannelAccess() {
		return eTypeOfChannel;
	}
	
	public EnumRule getTypeOfChannelRule() {
		return getTypeOfChannelAccess().getRule();
	}
	
	//Channel:
	//	{Channel} Type+=TypeOfChannel 'Channel' name=EString;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//Transition:
	//	{Transition}
	//	'Transition' source=[State|EString] '->' '(' channel=[Channel|EString] ')' target=[State|EString] event=Event;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum Event:
	//	SEND | RECEIVE;
	public EventElements getEventAccess() {
		return eEvent;
	}
	
	public EnumRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//State:
	//	{State}
	//	'State'
	//	name=EString;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
