/*
 * generated by Xtext 2.9.1
 */
package de.luh.se.mbse.network.textualeditor.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.luh.se.mbse.network.textualeditor.amf.Network
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AmfGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (network : resource.allContents.toIterable.filter(Network)) {
			fsa.generateFile("network/" + network.name + ".java", network.compile)
		}
	}
	
	def compile(Network network) 
		'''
«««		«IF network.eContainer.fullyQualifiedName != null»
  			package network;
«««  		«ENDIF»
  		
  		public class «network.name» {
  			
  			// Channels declarations:
  			«FOR c : network.channel»
  				«c.type» «c.name» 
  			«ENDFOR»
  			
  			// Statemachines in Network
  			«FOR s : network.statemachine»
  			    «s.name» 
  			«ENDFOR»
  			
  		}
		'''
	
}
